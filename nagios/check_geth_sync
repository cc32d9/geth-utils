#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use JSON;
use LWP::UserAgent;

my $url;
my $warn_limit = 45;
my $crit_limit = 150;


my $ok = GetOptions
    ('url=s'     => \$url,
     'warn=f'    => \$warn_limit,
     'crit=f'    => \$crit_limit);


if( not $ok or scalar(@ARGV) > 0 or not $url )
{
    print STDERR "Usage: $0 --url=URL [options...]\n",
    "The script checks latest block timestamp from a geth instance and compares it to host time.\n",
    "Options:\n",
    "  --url=URL          geth API endpoint\n",
    "  --warn=X           \[$warn_limit\] warning level, float in seconds\n",
    "  --crit=X           \[$crit_limit\] critical level, float in seconds\n";

    exit 1;
}


my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 0 });
$ua->timeout(10);
$ua->env_proxy();

my $req = HTTP::Request->new( 'POST', $url );
$req->header( 'Content-Type' => 'application/json' );

$req->content( encode_json({jsonrpc => '2.0',
                            id      => 1,
                            method  => 'eth_getBlockByNumber',
                            params  => ['latest', JSON->boolean(0)]}) );

my $res =  $ua->request($req);
if( not $res->is_success )
{
    bailout('HTTP error', $res->decoded_content);
}

my $content = $res->decoded_content;
my $result = eval { decode_json($content) };
bailout('JSON parsing error', $@) if $@;

if( defined($result->{'error'}) )
{
    bailout('RPC error', $result->{'error'}{'message'});
}

my $timestamp = $result->{'result'}{'timestamp'};
bailout('Error', 'Cannot find timestamp in the responce') unless defined($timestamp);

my $diff = time() - hex($timestamp);

my $exitcode = 0;
my $status = 'OK';
if( $diff > $crit_limit )
{
    $exitcode = 2;
    $status = 'CRITICAL';
}
elsif( $diff > $warn_limit )
{
    $exitcode = 1;
    $status = 'WARNING';
}

printf("BLOCKTIME %s - %fs difference|time_diff=%f\n", $status, $diff, $diff);
exit($exitcode);



sub bailout
{
    my ($error, $msg) = @_;
    printf("%s: %s\n", $error, $msg);
    exit(2);
}
